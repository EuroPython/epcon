
# Generated by Django 1.9.13 on 2018-10-09 08:26


from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('assopy', '0006_add_bank_to_payment_options'),
        ('conference', '0005_add_captcha_question'),
    ]

    operations = [
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=6)),
                ('message', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assopy.User')),
            ],
        ),
        migrations.CreateModel(
            name='P3Profile',
            fields=[
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='p3_profile', serialize=False, to='conference.AttendeeProfile')),
                ('tagline', models.CharField(blank=True, help_text='describe yourself in one line!', max_length=60)),
                ('twitter', models.CharField(blank=True, max_length=80)),
                ('image_gravatar', models.BooleanField(default=False)),
                ('image_url', models.URLField(max_length=500)),
                ('country', models.CharField(blank=True, db_index=True, default=b'', max_length=2)),
                ('spam_recruiting', models.BooleanField(default=False)),
                ('spam_user_message', models.BooleanField(default=False)),
                ('spam_sms', models.BooleanField(default=False)),
                ('interests', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='conference.ConferenceTaggedItem', to='conference.ConferenceTag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='P3Talk',
            fields=[
                ('talk', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='p3_talk', serialize=False, to='conference.Talk')),
                ('sub_community', models.CharField(choices=[(b'', b'All'), (b'pydata', b'PyData')], default=b'', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='SpeakerConference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_time', models.BooleanField(default=False)),
                ('speaker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='p3_speaker', to='conference.Speaker')),
            ],
        ),
        migrations.CreateModel(
            name='Sprint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('abstract', models.TextField(blank=True)),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='conference.Conference')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assopy.User')),
            ],
        ),
        migrations.CreateModel(
            name='SprintPresence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sprint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='p3.Sprint')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assopy.User')),
            ],
        ),
        migrations.CreateModel(
            name='TicketConference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shirt_size', models.CharField(choices=[(b'fs', b'S (female)'), (b'fm', b'M (female)'), (b'fl', b'L (female)'), (b'fxl', b'XL (female)'), (b'fxxl', b'XXL (female)'), (b'fxxxl', b'3XL (female)'), (b's', b'S (male)'), (b'm', b'M (male)'), (b'l', b'L (male)'), (b'xl', b'XL (male)'), (b'xxl', b'XXL (male)'), (b'xxxl', b'3XL (male)'), (b'xxxxl', b'4XL (male)')], default=b'l', max_length=5)),
                ('python_experience', models.PositiveIntegerField(choices=[(0, b'no comment'), (1, b'1 star  (just starting)'), (2, b'2 stars (beginner)'), (3, b'3 stars (intermediate)'), (4, b'4 stars (expert))'), (5, b'5 stars (guru level)')], default=0, null=True)),
                ('diet', models.CharField(choices=[(b'omnivorous', b'Omnivorous'), (b'vegetarian', b'Vegetarian'), (b'other', b'Other')], default=b'omnivorous', max_length=10)),
                ('tagline', models.CharField(blank=True, help_text='a (funny?) tagline that will be displayed on the badge<br />Eg. CEO of FooBar Inc.; Super Python fanboy; Simple is better than complex.', max_length=60)),
                ('days', models.TextField(blank=True, verbose_name='Days of attendance')),
                ('badge_image', models.ImageField(blank=True, help_text="A custom badge image instead of the python logo.Don't use a very large image, 250x250 should be fine.", null=True, upload_to=b'p3/tickets/badge_image')),
                ('assigned_to', models.EmailField(blank=True, help_text='EMail of the attendee for whom this ticket was bought.', max_length=254)),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='p3_conference', to='conference.Ticket')),
            ],
        ),
    ]
