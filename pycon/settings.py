# -*- coding: utf-8 -*-
# Django settings for pycon project.
import os.path

import dj_database_url
from decouple import config

from django.urls import reverse_lazy

from model_utils import Choices


# override ugettext
def _(x):
    return x


# Configure DEBUG settings
DEBUG = config('DEBUG', default=False, cast=bool)

# We want to use HTTPS for everything and not fiddle with docker or gunicorn
# setups.
#
# See http://security.stackexchange.com/questions/8964/ for details.
#
# Note: This doesn't really help all that much. In order to Django behave, you
# have to configure your proxy to send proper X-Forward-* headers and enable
# SECURE_PROXY_SSL_HEADER.
#
if not DEBUG:
    # Only set this in production mode, since debug servers typically don't
    # have HTTPS set up.
    os.environ['HTTPS'] = 'on'
    # HTTPS configuration
    HTTPS = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


ADMINS = (("web-wg", "web-wg@europython.eu"),)
MANAGERS = ADMINS

ALLOWED_HOSTS = config(
    "ALLOWED_HOSTS",
    default="*",
    cast=lambda v: [s.strip() for s in v.split(",")],
)
APPEND_SLASH = config("APPEND_SLASH", default=True, cast=bool)

PROJECT_DIR = config(
    "PROJECT_DIR",
    default=os.path.normpath(os.path.join(os.path.dirname(__file__), "..")),
)
DATA_DIR = config("DATA_DIR", default=os.path.join(PROJECT_DIR, "data"))
OTHER_STUFF = config(
    "OTHER_STUFF", default=os.path.join(PROJECT_DIR, "documents")
)

LOGS_DIR = os.path.join(PROJECT_DIR, "logs/")

SITE_DATA_ROOT = DATA_DIR + "/site"

PROFILE_PICTURE_MAX_SIZE = 2621440

# DATABASE
# --------
DATABASES = {
    'default': dj_database_url.config(
        default='sqlite:///{}/epcon.db'.format(SITE_DATA_ROOT)
    ),
}

# Email
# -----
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EuroPython outgoing mail server
EMAIL_HOST = "mail.europython.io"

# Email sender address to use for emails generated by Django for admins
SERVER_EMAIL = config('SERVER_EMAIL', default='noreply@europython.eu')

# Email sender address used per default for emails to e.g. attendees
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='info@europython.eu')

# Timezone and languages
# -----------------------
# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True

TIME_ZONE = 'Europe/Amsterdam'

LANGUAGE_CODE = 'en'

LANGUAGES = (
    ('en', _('English')),
)

CONFERENCE_TALK_SUBMISSION_LANGUAGES = (
    ('en', _('English')),
)

# Site ID
SITE_ID = 1

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"

MEDIA_ROOT = DATA_DIR + '/media_public'
SECURE_MEDIA_ROOT = DATA_DIR + '/media_private'

# Set the file upload permissions - otherwise large files
# will not have the read permissions set.
# https://docs.djangoproject.com/en/1.11/ref/settings/#std:setting-FILE_UPLOAD_PERMISSIONS
FILE_UPLOAD_PERMISSIONS = config(
    'FILE_UPLOAD_PERMISSIONS', default='0o644', cast=lambda x: int(x, 8)
)

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/media/'
SECURE_MEDIA_URL = '/p3/secure_media/'
# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = DATA_DIR + '/static/'

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, 'assets'),
]

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # 'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = config('SECRET_KEY')

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = config(
    "SOCIAL_AUTH_GOOGLE_OAUTH2_KEY", default=""
)
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config(
    "SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET", default=""
)

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.mail.mail_validation',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    # THIS IS IMPORTANT!!!! Connect new authenticated users to profiles
    # of the important project apps!!
    'conference.accounts.social_connect_profile',

    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details'
)

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(PROJECT_DIR, "templates")],
        "OPTIONS": {
            "debug": DEBUG,
            "context_processors": [
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.i18n",
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.template.context_processors.media",
                "django.template.context_processors.csrf",
                "django.template.context_processors.request",
                "django.template.context_processors.tz",
                "sekizai.context_processors.sekizai",
                "cms.context_processors.cms_settings",
                "django.template.context_processors.static",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
                # epcon context processors
                "p3.context_processors.settings",
                "conference.context_processors.epcon_ctx",
            ],
            "loaders": [
                "django.template.loaders.filesystem.Loader",
                "django.template.loaders.app_directories.Loader",
            ],
        },
    }
]

MIDDLEWARE = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.http.ConditionalGetMiddleware',
    'django.middleware.common.CommonMiddleware',
    'cms.middleware.user.CurrentUserMiddleware',
    'cms.middleware.page.CurrentPageMiddleware',
    'cms.middleware.toolbar.ToolbarMiddleware',
    'cms.middleware.language.LanguageCookieMiddleware',
)

ROOT_URLCONF = 'pycon.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'pycon.wsgi.application'


LOCALE_PATHS = (
    os.path.join(PROJECT_DIR, 'locale'),
)

INSTALLED_APPS = (
    'filebrowser',

    'djangocms_admin_style',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.admin',
    'django.contrib.staticfiles',
    'django.contrib.redirects',

    'p3',
    'assopy',
    'conference',
    'email_template',

    'djangocms_text_ckeditor',
    'cmsplugin_filer_file',
    'cmsplugin_filer_folder',
    'cmsplugin_filer_link',
    'cmsplugin_filer_image',
    'cmsplugin_filer_teaser',
    'cmsplugin_filer_video',

    'treebeard',
    'cms',
    'menus',
    'sekizai',
    'taggit',
    'taggit_labels',
    'mptt',
    'crispy_forms',

    'filer',
    'easy_thumbnails',

    'markitup',
    'cms_utils',
    'social_django',
)

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': (
                '%(asctime)s [%(process)d] '
                '%(levelname)s - %(name)s - %(module)s -'
                '%(funcName)s: %(message)s'
            )
        },
        'simple': {
            'format': (
                '%(levelname)s - %(name)s - %(module)s -'
                '%(funcName)s: %(message)s'
            )
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'conference.log'),
            'encoding': 'utf-8',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['file', 'mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'conference.tags': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'assopy.views': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}

AUTHENTICATION_BACKENDS = (
    'assopy.auth_backends.IdBackend',
    'assopy.auth_backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',

    'social_core.backends.google.GoogleOAuth2',
)


# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
# Examples: "http://foo.com/media/", "/media/".
ADMIN_MEDIA_PREFIX = '/static/admin/'
FILEBROWSER_URL_FILEBROWSER_MEDIA = '/static/filebrowser/'

PAGE_USE_SITE_ID = False
DEFAULT_PAGE_TEMPLATE = 'cms/content.html'
PAGE_UNIQUE_SLUG_REQUIRED = False
PAGE_TAGGING = True
PAGE_LANGUAGES = (
    ('en-us', _('English')),
)
PAGE_DEFAULT_LANGUAGE = PAGE_LANGUAGES[0][0]
PAGE_LANGUAGE_MAPPING = lambda lang: PAGE_LANGUAGES[0][0]  # NOQA

PAGE_REAL_TIME_SEARCH = False

PAGE_USE_STRICT_URL = True

CMS_LANGUAGES = {
    1: [
        {
            'code': 'en',
            'name': _('English'),
        },
    ],
    'default': {
        'fallbacks': ['en'],
        'redirect_on_fallback': True,
        'public': True,
        'hide_untranslated': False,

    }
}
CMS_TEMPLATES = (
    # ('conference/content/generic_content_page.html', 'Generic Content Page'),
    ('conference/content/generic_content_page_with_sidebar.html',
     'Generic Content Page (with sidebar)'),
    ('conference/homepage/home_template.html',
     'Homepage'),
)
PAGE_TEMPLATES = (
    ('conference/content/generic_content_page_with_sidebar.html',
     'Generic Content Page (with sidebar)'),
)
CMS_PLUGIN_PROCESSORS = (
    'cms_utils.processors.process_templatetags',
)
MARKITUP_FILTER = ('markdown2.markdown', {'safe_mode': False})

CKEDITOR_SETTINGS = {
    'height': 300,
    'stylesSet': 'default:/static/p6/javascripts/ckeditor.wysiwyg.js',
    'contentsCss': ['/static/css/base.css'],
    'language': '{{ language }}',
    'toolbar': 'CMS',
    'extraPlugins': 'cmsplugins',
    'basicEntities': False,
    'entities': False,
}

# html5lib sanitizer settings
TEXT_ADDITIONAL_TAGS = ('iframe',)
TEXT_ADDITIONAL_ATTRIBUTES = (
    "scrolling",
    "allowfullscreen",
    "frameborder",
    "src",
    "height",
    "width",
)

#
# We're not going to use this feature for EuroPython 2015+:
#
THUMBNAIL_PROCESSORS = (
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    'filer.thumbnail_processors.scale_and_crop_with_subject_location',
    'easy_thumbnails.processors.filters',
)
THUMBNAIL_HIGH_RESOLUTION = True

CRISPY_TEMPLATE_PACK = "bootstrap4"

# Override the message class to get it to work with bootstrap styles.
from django.contrib.messages import constants as messages  # noqa
MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}
MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'


#
# Session management
#
SESSION_COOKIE_NAME = 'sid'
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'

CONFERENCE_CONFERENCE = 'ep2021'
CONFERENCE_NAME = "EuroPython 2021"
# IF The conference has timeslots and IF we want to ask speakers for their
# availability in these timeslots, add/edit below. Otherwise just set to None
# CONFERENCE_TIMESLOTS = None
CONFERENCE_TIMESLOTS = (
    ('morning', _('08-12 CEST / 06-10 UTC')),
    ('afternoon', _('12-16 CEST / 10-14 UTC')),
    ('evening', _('16-20 CEST / 14-18 UTC')),
)
CONFERENCE_SEND_EMAIL_TO = ["helpdesk@europython.eu"]
CONFERENCE_TALK_SUBMISSION_NOTIFICATION_EMAIL = []
CONFERENCE_VOTING_DISALLOWED = 'https://ep2021.europython.eu/talk-voting/'
CONFERENCE_TALK_VOTING_ELIGIBLE = (
    "ep2015",
    "ep2016",
    "ep2017",
    "ep2018",
    "ep2019",
    "ep2021",
)
EARLY_BIRD_ORDER_LIMIT = config("EARLY_BIRD_ORDER_LIMIT", default=220, cast=int)

CONFERENCE_TALKS_RANKING_FILE = SITE_DATA_ROOT + '/rankings.txt'
CONFERENCE_ADMIN_TICKETS_STATS_EMAIL_LOG = (
    SITE_DATA_ROOT + "/admin_ticket_emails.txt"
)
CONFERENCE_ADMIN_TICKETS_STATS_EMAIL_LOAD_LIBRARY = ['conference']

# Conference sub-communities
CONFERENCE_TALK_SUBCOMMUNITY = (
    ('', _('All')),
    ('pydata', _('PyData')),
)

CONFERENCE_TALK_DOMAIN = Choices(
    ('business_track', _('Business Track')),
    ('devops', _('DevOps')),
    ('django', _('Django Track')),
    ('education', _('Educational Track')),
    ('general', _('General Python')),
    ('hw_iot', _('Hardware/IoT Track')),
    ('pydata', _('PyData Track')),
    ('science', _('Science Track')),
    ('web', _('Web Track')),
    ('', 'other', _('Other'))
)


# T-shirt sizes
# TODO: Make that into Choices
CONFERENCE_TICKET_CONFERENCE_SHIRT_SIZES = (
    (None, 'Please select your shirt size!'),
    ('fs', 'S (fitted cut)'),
    ('fm', 'M (fitted cut)'),
    ('fl', 'L (fitted cut)'),
    ('fxl', 'XL (fitted cut)'),
    ('fxxl', 'XXL (fitted cut)'),
    ('fxxxl', '3XL (fitted cut)'),
    ('s', 'S (straight cut)'),
    ('m', 'M (straight cut)'),
    ('l', 'L (straight cut)'),
    ('xl', 'XL (straight cut)'),
    ('xxl', 'XXL (straight cut)'),
    ('xxxl', '3XL (straight cut)'),
    ('xxxxl', '4XL (straight cut)'),
)

# Available diets
CONFERENCE_TICKET_CONFERENCE_DIETS = (
    (None, "Please select your dietary preferences!"),
    ("omnivorous", _("Omnivorous")),
    ("vegetarian", _("Vegetarian")),
    # ('vegan', _('Vegan')),
    # ('kosher', _('Kosher')),
    # ('halal', _('Halal')),
    ("other", _("Other")),
)

# Python experience
CONFERENCE_TICKET_CONFERENCE_EXPERIENCES = (
    (0, _('no comment')),
    (1, _('1 star  (just starting)')),
    (2, _('2 stars (beginner)')),
    (3, _('3 stars (intermediate)')),
    (4, _('4 stars (expert))')),
    (5, _('5 stars (guru level)')),
)


def CONFERENCE_TICKETS(conf, ticket_type=None, fare_code=None):
    from conference.models import Ticket

    tickets = Ticket.objects.filter(fare__conference=conf, orderitem__order___complete=True)

    if ticket_type:
        tickets = tickets.filter(fare__ticket_type=ticket_type)

    if fare_code:
        if fare_code.endswith('%'):
            tickets = tickets.filter(fare__code__startswith=fare_code[:-1])
        else:
            tickets = tickets.filter(fare__code=fare_code)

    return tickets


def CONFERENCE_VOTING_OPENED(conf, user):
    # Can access the page:
    #   anyone during community voting
    #   superusers
    #   speakers (of current conference)
    #   who is in the special "pre_voting" group
    if user.is_superuser:
        return True

    # Only allow access during talk voting period
    if conf.voting():
        return True
    else:
        return False

    return False


def CONFERENCE_VOTING_ALLOWED(user):
    """ Determine whether user is allowed to participate in talk voting.
    """
    if not user.is_authenticated:
        return False

    if user.is_superuser:
        return True

    # Speakers of the current conference are always allowed to vote
    from conference.models import TalkSpeaker, Speaker
    try:
        count = TalkSpeaker.objects.filter(
            talk__conference=CONFERENCE_CONFERENCE,
            speaker=user.speaker).count()
    except Speaker.DoesNotExist:
        pass
    else:
        if count > 0:
            return True

    # People who have a ticket for the current conference assigned to
    # them can vote
    from p3 import models

    # Starting with EP2017, we allow people who have bought tickets in the
    # past, to also participate in talk voting.
    tickets = (
        models.TicketConference
        .objects
        .filter(
            ticket__fare__conference__in=CONFERENCE_TALK_VOTING_ELIGIBLE,
            assigned_to=user.email
        )
    )
    if tickets.exists():
        return True

    # Starting with EP2017, we know that all assigned tickets have
    # .assigned_to set correctly
    # tickets = models.TicketConference.objects \
    #          .filter(ticket__fare__conference=CONFERENCE_CONFERENCE,
    #                  assigned_to=user.email)

    # Old query (for tickets bought before 2017)
    from django.db.models import Q
    for conf in CONFERENCE_TALK_VOTING_ELIGIBLE:
        tickets = (
            models.TicketConference
            .objects
            .available(user, conf)
            .filter(
                Q(orderitem__order___complete=True)
                | Q(orderitem__order__method='admin')
            )
            .filter(
                Q(p3_conference=None)
                | Q(p3_conference__assigned_to='')
                | Q(p3_conference__assigned_to=user.email)
            )
        )

        if tickets.exists():
            return True

    return False


def CONFERENCE_SCHEDULE_ATTENDEES(schedule, forecast):
    from p3.stats import presence_days
    from conference.models import Schedule

    if not isinstance(schedule, Schedule):
        output = {}
        for s in Schedule.objects.filter(conference=schedule):
            output[s.id] = CONFERENCE_SCHEDULE_ATTENDEES(s, forecast)
        return output
    d = schedule.date.strftime('%Y-%m-%d')
    s = presence_days(schedule.conference)
    for row in s['data']:
        if row['title'] == '%s (no staff)' % d:
            if forecast:
                return row['total_nc']
            else:
                return row['total']
    return 0


#
# XXX What is this AssoPy stuff ?
#
ASSOPY_BACKEND = 'https://assopy.europython.eu/conference/externalcall'
ASSOPY_SEND_EMAIL_TO = ['billing-log@europython.io']

#
# This URL needs to be set to the main URL of the site.
#
# It is used for generating URLs pointing back to the site
# in quite a few places.
#
DEFAULT_URL_PREFIX = 'https://ep2021.europython.eu'
LOGIN_REDIRECT_URL = reverse_lazy("user_panel:dashboard")

P3_TWITTER_USER = 'europython'
P3_USER_MESSAGE_FOOTER = '''

This message was sent from a participant at the EuroPython conference.
Your email address is not disclosed to anyone, to stop receiving messages
from other users you can change your privacy settings from this page:
https://ep2021.europython.eu/accounts/profile/
'''


P3_ANONYMOUS_AVATAR = 'p5/images/headshot-default.jpg'


# Stripe payment integration
# --------------------------
STRIPE_ENABLED = True
STRIPE_SECRET_KEY = config("STRIPE_SECRET_KEY", default='')
STRIPE_PUBLISHABLE_KEY = config("STRIPE_PUBLISHABLE_KEY", default='')
STRIPE_COMPANY_NAME = config("STRIPE_COMPANY_NAME", default='')
STRIPE_COMPANY_LOGO = config("STRIPE_COMPANY_LOGO", default='')
STRIPE_CURRENCY = "EUR"
STRIPE_ALLOW_REMEMBER_ME = False

# files under SECURE_MEDIA_BOOT must be served by django, this if
# is needed to avoid they end up in a subdir of MEDIA_ROOT that is
# normally served by an external webserver
check = os.path.commonprefix((MEDIA_ROOT, SECURE_MEDIA_ROOT))
if check.startswith(MEDIA_ROOT):
    if not DEBUG:
        raise RuntimeError('SECURE_MEDIA_ROOT cannot be a subdir of MEDIA_ROOT')
    else:
        print('WARN, SECURE_MEDIA_ROOT is a subdir of MEDIA_ROOT')


if not SECRET_KEY:
    if not DEBUG:
        raise RuntimeError('SECRET_KEY not set')
    else:
        print('WARN, SECRET_KEY not set')

# This is used just for tests
DISABLE_CACHING = False

# Complete project setup.
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

# Matrix Auth API settings
MATRIX_AUTH_API_DEBUG = config(
    'MATRIX_AUTH_API_DEBUG',
    default=True,
    cast=bool
)
MATRIX_AUTH_API_ALLOWED_IPS = config(
    'MATRIX_AUTH_API_ALLOWED_IPS',
    default='',
    cast=lambda v: [s.strip() for s in v.split(',') if s.strip()]
)
