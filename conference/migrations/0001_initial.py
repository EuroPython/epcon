# Generated by Django 2.2.17 on 2020-12-03 18:26

import conference.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('assopy', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AttendeeProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('slug', models.SlugField(unique=True)),
                ('uuid', models.CharField(max_length=6, unique=True)),
                ('image', models.ImageField(blank=True, upload_to=conference.models._fs_upload_to('profile'))),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Birthday')),
                ('is_minor', models.BooleanField(default=False)),
                ('phone', models.CharField(blank=True, help_text='We require a mobile phone number for all speakers for last minute contacts and in case we need timely clarification (if no reponse to previous emails). Use the international format (e.g.: +44 123456789).', max_length=30, verbose_name='Phone')),
                ('gender', models.CharField(choices=[('m', 'Male'), ('f', 'Female'), ('o', 'Other'), ('x', 'Prefer not to say')], help_text='We use this information for statistics related to conference attendance diversity.', max_length=1)),
                ('personal_homepage', models.URLField(blank=True, verbose_name='Personal homepage')),
                ('company', models.CharField(blank=True, max_length=50, verbose_name='Company')),
                ('company_homepage', models.URLField(blank=True, verbose_name='Company homepage')),
                ('job_title', models.CharField(blank=True, max_length=50, verbose_name='Job title')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='Location')),
                ('visibility', models.CharField(choices=[('p', 'Publicly available'), ('m', 'Visible to EuroPython attendees'), ('x', 'Visible only to you')], default='x', max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='CaptchaQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('question', models.CharField(max_length=255)),
                ('answer', models.CharField(max_length=255)),
                ('enabled', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Conference',
            fields=[
                ('code', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('cfp_start', models.DateField(blank=True, null=True)),
                ('cfp_end', models.DateField(blank=True, null=True)),
                ('conference_start', models.DateField(blank=True, null=True)),
                ('conference_end', models.DateField(blank=True, null=True)),
                ('voting_start', models.DateField(blank=True, null=True)),
                ('voting_end', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ConferenceTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
                ('category', models.CharField(blank=True, default='', max_length=50)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ConferenceTaggedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conference_conferencetaggeditem_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conference_conferencetaggeditem_items', to='conference.ConferenceTag')),
            ],
            options={
                'verbose_name': 'Tagged Item',
                'verbose_name_plural': 'Tagged Items',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField()),
                ('custom', models.TextField(blank=True, help_text='title for a custom event (an event without a talk)')),
                ('abstract', models.TextField(blank=True, help_text='description for a custom event')),
                ('duration', models.PositiveIntegerField(default=0, help_text='duration of the event (in minutes). Override the talk duration if present')),
                ('tags', models.CharField(blank=True, help_text='comma separated list of tags. Something like: special, break, keynote', max_length=200)),
                ('video', models.CharField(blank=True, max_length=1000)),
                ('bookable', models.BooleanField(default=False)),
                ('seats', models.PositiveIntegerField(default=0, help_text='seats available. Override the track default if set')),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='ExchangeRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datestamp', models.DateField()),
                ('currency', models.CharField(max_length=3)),
                ('rate', models.DecimalField(decimal_places=5, max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name='Fare',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conference', models.CharField(help_text='Conference code', max_length=20)),
                ('code', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('start_validity', models.DateField(blank=True, null=True)),
                ('end_validity', models.DateField(blank=True, null=True)),
                ('recipient_type', models.CharField(choices=[('c', 'Company'), ('p', 'Personal'), ('s', 'Student')], default='p', max_length=1)),
                ('ticket_type', models.CharField(choices=[('conference', 'Conference ticket'), ('partner', 'Partner Program'), ('event', 'Event'), ('other', 'Other')], db_index=True, default='conference', max_length=10)),
                ('payment_type', models.CharField(choices=[('p', 'Payment'), ('v', 'Voucher'), ('d', 'Deposit')], default='p', max_length=1)),
                ('blob', models.TextField(blank=True)),
            ],
            options={
                'unique_together': {('conference', 'code')},
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conference', models.CharField(help_text='Name of the conference', max_length=20)),
                ('slug', models.SlugField()),
                ('date', models.DateField()),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Speaker',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sponsor', models.CharField(help_text='Name of the sponsor', max_length=100)),
                ('slug', models.SlugField()),
                ('url', models.URLField(blank=True)),
                ('logo', models.ImageField(blank=True, help_text='Insert a raster image big enough to be scaled as needed', upload_to=conference.models._fs_upload_to('sponsor'))),
                ('alt_text', models.CharField(blank=True, max_length=150)),
                ('title_text', models.CharField(blank=True, max_length=150)),
            ],
            options={
                'ordering': ['sponsor'],
            },
        ),
        migrations.CreateModel(
            name='Talk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(default=conference.models.random_shortuuid, editable=False, max_length=40)),
                ('title', models.CharField(max_length=80, verbose_name='Talk title')),
                ('sub_title', models.CharField(blank=True, default='', max_length=1000, verbose_name='Sub title')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('prerequisites', models.CharField(blank=True, default='', help_text='What should attendees know already', max_length=150, verbose_name='Prerequisites')),
                ('conference', models.CharField(help_text='name of the conference', max_length=20)),
                ('admin_type', models.CharField(blank=True, choices=[('o', 'Opening session'), ('c', 'Closing session'), ('l', 'Lightning talk'), ('k', 'Keynote'), ('r', 'Recruiting session'), ('m', 'EPS session'), ('p', 'Community session'), ('s', 'Open space'), ('e', 'Social event'), ('x', 'Reserved slot'), ('z', 'Sponsored session')], max_length=1)),
                ('language', models.CharField(choices=[('en', 'English')], default='en', max_length=3, verbose_name='Language')),
                ('abstract_short', models.TextField(default='', help_text='Please enter a short description of the talk you are submitting.', verbose_name='Talk abstract short')),
                ('abstract_extra', models.TextField(blank=True, default='', help_text='<p>Please enter instructions for attendees.</p>', verbose_name='Talk abstract extra')),
                ('slides', models.FileField(blank=True, upload_to=conference.models._fs_upload_to('slides'))),
                ('slides_url', models.URLField(blank=True)),
                ('repository_url', models.URLField(blank=True)),
                ('video_type', models.CharField(blank=True, choices=[('viddler_oembed', 'oEmbed (Youtube, Vimeo, ...)'), ('download', 'Download')], max_length=30)),
                ('video_url', models.TextField(blank=True)),
                ('video_file', models.FileField(blank=True, upload_to=conference.models._fs_upload_to('videos'))),
                ('teaser_video', models.URLField(blank=True, help_text='Insert the url for your teaser video', verbose_name='Teaser video')),
                ('status', models.CharField(choices=[('proposed', 'Proposed'), ('accepted', 'Accepted'), ('canceled', 'Canceled'), ('waitlist', 'Waitlist'), ('declined', 'Declined')], default='proposed', max_length=8)),
                ('level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=12, verbose_name='Audience Python level')),
                ('training_available', models.BooleanField(default=False)),
                ('type', models.CharField(choices=[('t_30', 'Talk (30 mins)'), ('t_45', 'Talk (45 mins)'), ('t_60', 'Talk (60 mins)'), ('i_60', 'Interactive (60 mins)'), ('r_180', 'Training (180 mins)'), ('p_45', 'Poster session (45 mins)'), ('p_180', 'Poster session (180 mins)'), ('n_60', 'Panel (60 mins)'), ('n_90', 'Panel (90 mins)'), ('h_180', 'Help desk (180 mins)')], default='t_30', max_length=5)),
                ('domain', models.CharField(blank=True, choices=[('business_track', 'Business Track'), ('devops', 'DevOps'), ('django', 'Django Track'), ('education', 'Educational Track'), ('general', 'General Python'), ('hw_iot', 'Hardware/IoT Track'), ('pydata', 'PyData Track'), ('science', 'Science Track'), ('web', 'Web Track'), ('', 'Other')], default='', max_length=20)),
                ('domain_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=12, verbose_name='Audience Domain Level')),
                ('duration', models.IntegerField(default=0, help_text='This is the duration of the talk. Set to 0 to use the default talk duration.', verbose_name='Duration')),
                ('suggested_tags', models.CharField(blank=True, max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('track', models.CharField(max_length=20, verbose_name='Track name')),
                ('title', models.TextField(help_text='HTML supported', verbose_name='Track title')),
                ('seats', models.PositiveIntegerField(default=0)),
                ('order', models.PositiveIntegerField(default=0)),
                ('translate', models.BooleanField(default=False)),
                ('outdoor', models.BooleanField(default=False)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='conference.Schedule')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Attendee name, i.e. the person who will attend the conference.', max_length=60)),
                ('frozen', models.BooleanField(default=False, help_text='If a ticket was canceled or otherwise needs to be marked as invalid, please check this checkbox to indicate this.', verbose_name='ticket canceled / invalid / frozen')),
                ('ticket_type', models.CharField(choices=[('standard', 'standard'), ('staff', 'staff')], default='standard', max_length=8)),
                ('fare', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='conference.Fare')),
                ('user', models.ForeignKey(help_text='Ticket assignee', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TalkSpeaker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('helper', models.BooleanField(default=False)),
                ('speaker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='conference.Speaker')),
                ('talk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='conference.Talk')),
            ],
            options={
                'unique_together': {('talk', 'speaker')},
            },
        ),
        migrations.AddField(
            model_name='talk',
            name='speakers',
            field=models.ManyToManyField(through='conference.TalkSpeaker', to='conference.Speaker'),
        ),
        migrations.AddField(
            model_name='talk',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='conference.ConferenceTaggedItem', to='conference.ConferenceTag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='StripePayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(default=uuid.uuid4, max_length=40, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('token', models.CharField(max_length=100)),
                ('token_type', models.CharField(max_length=20)),
                ('charge_id', models.CharField(max_length=100, null=True)),
                ('session_id', models.CharField(max_length=100, null=True)),
                ('email', models.CharField(max_length=255)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('NEW', 'New'), ('SUCCESSFUL', 'Successful'), ('FAILED', 'Failed')], max_length=20)),
                ('message', models.CharField(blank=True, default='', max_length=255)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='assopy.Order')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SponsorIncome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conference', models.CharField(max_length=20)),
                ('income', models.PositiveIntegerField()),
                ('tags', models.CharField(blank=True, help_text='comma separated list of tags. Something like: special, break, keynote', max_length=200)),
                ('sponsor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='conference.Sponsor')),
            ],
            options={
                'ordering': ['conference'],
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('uuid', models.CharField(default=uuid.uuid4, max_length=40, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField()),
                ('content', models.TextField()),
                ('status', models.PositiveIntegerField(choices=[(0, 'Draft'), (10, 'Published'), (20, 'Deleted')], default=0)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='conference.Conference')),
            ],
            options={
                'verbose_name_plural': 'News',
                'ordering': ['-published_date'],
            },
        ),
        migrations.CreateModel(
            name='MultilingualContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(db_index=True)),
                ('language', models.CharField(max_length=3)),
                ('content', models.CharField(max_length=20)),
                ('body', models.TextField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='EventTrack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='conference.Event')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='conference.Track')),
            ],
            options={
                'unique_together': {('track', 'event')},
            },
        ),
        migrations.AddField(
            model_name='event',
            name='schedule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='conference.Schedule'),
        ),
        migrations.AddField(
            model_name='event',
            name='sponsor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='conference.Sponsor'),
        ),
        migrations.AddField(
            model_name='event',
            name='talk',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='conference.Talk'),
        ),
        migrations.AddField(
            model_name='event',
            name='tracks',
            field=models.ManyToManyField(through='conference.EventTrack', to='conference.Track'),
        ),
        migrations.CreateModel(
            name='VotoTalk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.DecimalField(decimal_places=2, max_digits=5)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True, null=True)),
                ('talk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='conference.Talk')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Talk voting',
                'verbose_name_plural': 'Talk votings',
                'unique_together': {('user', 'talk')},
            },
        ),
    ]
